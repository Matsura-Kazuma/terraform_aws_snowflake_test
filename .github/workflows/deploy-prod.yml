name: Deploy Prod（承認 + コストガード）
on:
  workflow_dispatch:
    inputs:
      stack:
        description: "スタックパス（例: stacks/prd/ap-northeast-1/foundation）"
        required: true
        type: string
permissions:
  contents: read
  # id-token: write → OIDC を使って AWS にフェデレート認証するために必要。
  # deployments: write → GitHub Environments と連携可能（デプロイ状況を GitHub 上に反映）。
  id-token: write
  deployments: write
environment:
  name: Prod
# stacks/prd/ap-northeast-1/foundation に対して同時に 2つ Apply が走るのを防ぐ。
concurrency:
  group: deploy-prod-${{ inputs.stack }}
  cancel-in-progress: false
jobs:
  apply:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with: { terraform_version: "1.8.5" }

      - name: AWS 認証（Prod 専用）
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_PRD_APPLY_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: SOPS 復号
        run: |
          echo "${{ secrets.SOPS_AGE_KEY }}" > /tmp/agekey.txt
          export SOPS_AGE_KEY_FILE=/tmp/agekey.txt
          if [ -f "${{ inputs.stack }}/secrets.enc.tfvars" ]; then
            sops -d "${{ inputs.stack }}/secrets.enc.tfvars" > "${{ inputs.stack }}/secrets.dec.tfvars"
          fi

      - name: Terraform Init
        run: terraform -chdir=${{ inputs.stack }} init -backend-config=${{ inputs.stack }}/backend.hcl

      - name: Infracost ポリシー（閾値超過で失敗）
        uses: infracost/actions/check-run@v3
        with:
          path: ${{ inputs.stack }}
          fail-on-diff: true
          config-file: policy/infracost.yml

      - name: 手動承認（Prod）
        # Approver（承認者）を GitHub Issue ベースで呼び出し、手動での承認を待つ。
        # vars.PROD_APPROVERS に登録されたユーザーだけが承認可能。
        # コストチェック通過後に承認フローが入ることで安全性を確保。
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ vars.PROD_APPROVERS }}
          minimum-approvals: 1
          issue-title: "Prod Apply Approval: ${{ inputs.stack }}"
          issue-body: "Infracost チェック通過。Apply の承認をお願いします。"

      - name: Terraform Plan
        run: terraform -chdir=${{ inputs.stack }} plan -var-file=secrets.dec.tfvars -input=false -lock=true -out=tfplan.bin

      - name: Terraform Apply
        run: terraform -chdir=${{ inputs.stack }} apply -input=false -auto-approve tfplan.bin

      - name: 復号ファイル削除
        if: always()
        run: rm -f ${{ inputs.stack }}/secrets.dec.tfvars
